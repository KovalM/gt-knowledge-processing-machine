scp_program -> proc_dfs_for_articulation_point (*	
	-> rrel_params: ... (*
		-> rrel_1: rrel_in: _v;;
		-> rrel_2: rrel_in: _p;;
		-> rrel_3: rrel_in: _graph;;
		-> rrel_4: rrel_in: _not_checked_vertexes;;
		-> rrel_5: rrel_in: _timer;;
		-> rrel_6: rrel_in: tin_vertex;;
		-> rrel_7: rrel_in: fup_vertex;;
		-> rrel_8: rrel_in: _node;;
		-> rrel_9: rrel_in: _set_point_of_articulation;;
	*);;
	-> rrel_operators: ... (*
// Увеличиваем время timer
        -> rrel_init: ..step1_t (*
        	<- contAdd;;
        	-> rrel_1: rrel_fixed: rrel_scp_var: _timer;;
	        -> rrel_2: rrel_fixed: rrel_scp_var: _timer;;
	        -> rrel_3: rrel_fixed: rrel_scp_const: [1];;

	        => nrel_goto: ..step2_t;;
        *);;

// Создание узла _tin
		-> ..step2_t (*
		    <- genEl;;
	        -> rrel_1: rrel_assign: rrel_node: rrel_link: rrel_const: rrel_scp_var: _tin;;

	        => nrel_goto: ..step3_t;; 
		*);;

// Занесение в узел _tin _timer
		-> ..step3_t (*
        	<- contAssign;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: _tin;;
	        -> rrel_2: rrel_fixed: rrel_scp_const: _timer;;

	        => nrel_goto: ..step4_t;;
		*);;

// Создание узла _fup
		-> ..step4_t (*
		    <- genEl;;
	        -> rrel_1: rrel_assign: rrel_node: rrel_link: rrel_const: rrel_scp_var: _fup;;

	        => nrel_goto: ..step5_t;; 
		*);;

// Занесение в узел _fup _timer
		-> ..step5_t (*
        	<- contAssign;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: _fup;;
	        -> rrel_2: rrel_fixed: rrel_scp_const: _timer;;

	        => nrel_goto: ..step6_t;;
		*);;

// Прикрепляем _tin к вершине 
		-> ..step6_t (*
        	<- genElStr5;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _v;;
	        -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc_tin_2;;
	        -> rrel_3: rrel_fixed: rrel_scp_var: rrel_link: rrel_const: _tin;;
	        -> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_tin_4;;
	        -> rrel_5: rrel_fixed: rrel_scp_const: rrel_node: rrel_const: tin_vertex;;

	        => nrel_goto: ..step7_t;;
        *);;

// Прикрепляем _fup к вершине
        -> ..step7_t (*
        	<- genElStr5;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _v;;
	        -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc_fup_2;;
	        -> rrel_3: rrel_fixed: rrel_scp_var: rrel_link: rrel_const: _fup;;
	        -> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_fup_4;;
	        -> rrel_5: rrel_fixed: rrel_scp_const: rrel_node: rrel_const: fup_vertex;;

	        => nrel_goto: ..step8_t;;
        *);;

// Создание узла _children
		-> ..step8_t (*
		    <- genEl;;
	        -> rrel_1: rrel_assign: rrel_node: rrel_link: rrel_const: rrel_scp_var: _children;;

	        => nrel_goto: ..step9_t;; 
		*);;

// заносим 0 детей
        -> ..step9_t (*
            <- contAssign;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: _children;;
	        -> rrel_2: rrel_fixed: rrel_scp_const: [0];;

	        => nrel_goto: ..step10_t;;
        *);; 

// Создание узла _temp_set
		-> ..step10_t (*
		    <- genEl;;
	        -> rrel_1: rrel_assign: rrel_node: rrel_scp_var: _temp_set;;

	        => nrel_goto: ..start ;; 
		*);; 		

// Ищем смежные вершины и заносим все смежные вершины во временное множество
	    -> ..start (*
            <- searchSetStr5;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _v;;
            -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc2;;
            -> rrel_3: rrel_assign: rrel_scp_var: _el3;;
            -> rrel_4: rrel_assign: rrel_scp_var: _arc4;;
            -> rrel_5: rrel_fixed: rrel_scp_var : _graph;;
            -> rrel_set_3 : rrel_fixed : rrel_scp_var : _temp_set;;

            => nrel_goto : ..start1;; 
        *);;

// По определению О. Оре [стр. 38] делаем соотнесенный неориентированный
	    -> ..start1 (*
            <- searchSetStr5;;
            -> rrel_1: rrel_assign: rrel_scp_var: _el3;;
            -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc2;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _v;;
            -> rrel_4: rrel_assign: rrel_scp_var: _arc4;;
            -> rrel_5: rrel_fixed: rrel_scp_var : _graph;;
            -> rrel_set_1 : rrel_fixed : rrel_scp_var : _temp_set;;

            => nrel_goto : ..step1;; 
        *);;

// Ищем смежную вершину
        -> ..step1 (*
            <- searchElStr3;;
            -> rrel_1 : rrel_fixed : rrel_scp_var : _temp_set;;
            -> rrel_2 : rrel_assign : rrel_pos_const_perm : rrel_scp_var : _arc;;
            -> rrel_3 : rrel_assign : rrel_scp_var : _to;;

            => nrel_then : ..step2;; 
            => nrel_else : ..finish_dfs ;;
        *);; 

// Удаляем эту вершину с временного множества 
        -> ..step2 (*
            <- eraseEl;;
            -> rrel_1 : rrel_fixed : rrel_pos_const_perm : rrel_erase:rrel_scp_var : _arc;;

            => nrel_goto : ..step3;; 
        *);;

// Проверяем является ли эта вершина родителем
        -> ..step3 (*
            <- ifCoin;;
            -> rrel_1 : rrel_fixed : rrel_scp_var : _to;;
            -> rrel_2 : rrel_fixed : rrel_scp_var : _p;;

            => nrel_then: ..step1;; 
            => nrel_else: ..step4;; 
        *);;

// Проверяем находится ли вершина в множестве непосещенных вершин
        -> ..step4 (*
            <- searchElStr3;;
            -> rrel_1 : rrel_fixed : rrel_scp_var : _not_checked_vertexes;;
            -> rrel_2 : rrel_assign : rrel_pos_const_perm : rrel_scp_var : _arc;;
            -> rrel_3 : rrel_fixed : rrel_scp_var : _to;;

            => nrel_then : ..step5;; 
            => nrel_else : ..step4_2;; 
        *);;


// ---------------------			fup[v] = min (fup[v], tin[to]);			--------------------- BEGIN

// Рассчитываем новое время для fup_v (в области видимости именуется fup)
// Находим tin_to
        -> ..step4_2 (*
        	<- searchElStr5;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _to;;
	        -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc_tin_to_2;;
	        -> rrel_3: rrel_assign: rrel_scp_var: rrel_link: rrel_const: _tin_to;;
	        -> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_tin_to_4;;
	        -> rrel_5: rrel_fixed: rrel_scp_const: rrel_node: rrel_const: tin_vertex;;

	        => nrel_then: ..step4_3;;
	        => nrel_else: ..scp_operator_error_tin_to_print;;
        *);;  		

// На случай если что-то пошло не так
        -> ..scp_operator_error_tin_to_print (*
	        <- print;;
	        -> rrel_1: rrel_fixed: rrel_scp_const: [ERROR IN FIND tin_to, ..step4_2 !!!];;

	        => nrel_goto: ..finish_dfs;;
        *);;

// Нажодим меньшее
        -> ..step4_3 (*
	        <- ifGr;;
	        -> rrel_1: rrel_fixed : rrel_scp_var: _tin_to;;
	        -> rrel_2: rrel_fixed : rrel_scp_var: _fup;;

	        => nrel_then: ..step1;;                       // _fup уже и так минимальное, переходим в другим вершинам
	        => nrel_else: ..step4_3_min_to;;               // минимальное _tin_to, обнуляем _fup и прибавлем к нему _tin_to
        *);;

// min = tin_to поэтому обнуляем fup = 0  
        -> ..step4_3_min_to (*
	        <- contSub;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: _fup;;
	        -> rrel_2: rrel_fixed: rrel_scp_var: _fup;;
	        -> rrel_3: rrel_fixed: rrel_scp_var: _fup;;

	        => nrel_goto: ..step4_4_min_to_2;;
        *);;

// fup = 0 + tin_to = 0 + min = min
        -> ..step4_4_min_to_2 (*
	        	<- contAdd;;
	            -> rrel_1: rrel_fixed: rrel_scp_var: _fup;;
	            -> rrel_2: rrel_fixed: rrel_scp_var: _fup;;
	            -> rrel_3: rrel_fixed: rrel_scp_var: _tin_to;;

	            => nrel_goto: ..step1;;
        *);;

// ---------------------			fup[v] = min (fup[v], tin[to]);			----------------------- END         

// Удаляем вершину из множества непроверенных вершин
        -> ..step5 (*
            <- eraseEl;;
            -> rrel_1 : rrel_fixed : rrel_pos_const_perm : rrel_erase:rrel_scp_var : _arc;;

            => nrel_goto : ..in_dfs_recurs;; 
        *);;

// Рекурсивно вызываем поиск в глубину для следующей вершины
        -> ..in_dfs_recurs (*
            <- call;;
	        -> rrel_1: rrel_fixed: rrel_scp_const: proc_dfs_for_articulation_point;;
	        -> rrel_2: rrel_fixed: rrel_scp_const: ... (*
		        -> rrel_1: rrel_fixed: rrel_scp_var: _to;;
		        -> rrel_2: rrel_fixed: rrel_scp_var: _v;;
		        -> rrel_3: rrel_fixed: rrel_scp_var: _graph;;
		        -> rrel_4: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
		        -> rrel_5: rrel_fixed: rrel_scp_var: _timer;;
		        -> rrel_6: rrel_fixed: rrel_scp_const: tin_vertex;;
		        -> rrel_7: rrel_fixed: rrel_scp_const: fup_vertex;;
		        -> rrel_8: rrel_fixed: rrel_scp_var: _node;;
		        -> rrel_9: rrel_fixed: rrel_scp_var: _set_point_of_articulation;;
	        *);;
	        -> rrel_3: rrel_assign: rrel_scp_var: _descr;;

	        => nrel_goto: ..out_dfs_recurs;;
        *);;

// Ожидаем пока завершатся все предыдущии действия	
        -> ..out_dfs_recurs (*
	        <- waitReturn;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
	
	        => nrel_goto: ..step5_children;; 
	    *);;

// Увеличиваем количество детей
        -> ..step5_children (*
        	<- contAdd;;
        	-> rrel_1: rrel_fixed: rrel_scp_var: _children;;
	        -> rrel_2: rrel_fixed: rrel_scp_var: _children;;
	        -> rrel_3: rrel_fixed: rrel_scp_const: [1];;

	        => nrel_goto: ..step5_2;;
        *);;

// ---------------------			fup[v] = min (fup[v], fup[to]);			--------------------- BEGIN

// Рассчитываем новое время для fup_to (fup_v в области видимости именуется fup)
// Находим fup_to
        -> ..step5_2 (*
        	<- searchElStr5;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _to;;
	        -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc_fup_to_2;;
	        -> rrel_3: rrel_assign: rrel_scp_var: rrel_link: rrel_const: _fup_to;;
	        -> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_fup_to_4;;
	        -> rrel_5: rrel_fixed: rrel_scp_const: rrel_node: rrel_const: fup_vertex;;

	        => nrel_then: ..step5_3;;
	        => nrel_else: ..scp_operator_error_fup_to_print;;
        *);;  		

// На случай если что-то пошло не так
        -> ..scp_operator_error_fup_to_print (*
	        <- print;;
	        -> rrel_1: rrel_fixed: rrel_scp_const: [ERROR IN FIND fup_to, ..step5_2 !!!];;

	        => nrel_goto: ..end_dfs;;
        *);;

// Нажодим меньшее
        -> ..step5_3 (*
	        <- ifGr;;
	        -> rrel_1: rrel_fixed : rrel_scp_var: _fup_to;;
	        -> rrel_2: rrel_fixed : rrel_scp_var: _fup;;

	        => nrel_then: ..step_check_point_of_articulation;;  // _fup уже и так минимальное, переходим в другим вершинам
	        => nrel_else: ..step5_3_min_v;;                     // минимальное _fup_to, обнуляем _fup и прибавлем к нему _fup_to
        *);;

// min = fup_to поэтому обнуляем для fup = 0  
        -> ..step5_3_min_v (*
	        <- contSub;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: _fup;;
	        -> rrel_2: rrel_fixed: rrel_scp_var: _fup;;
	        -> rrel_3: rrel_fixed: rrel_scp_var: _fup;;

	        => nrel_goto: ..step5_3_min_v_2;;
        *);;

// fup = 0 + fup_to = 0 + min = min
        -> ..step5_3_min_v_2 (*
	        	<- contAdd;;
	            -> rrel_1: rrel_fixed: rrel_scp_var: _fup;;
	            -> rrel_2: rrel_fixed: rrel_scp_var: _fup;;
	            -> rrel_3: rrel_fixed: rrel_scp_var: _fup_to;;

	            => nrel_goto: ..step_check_point_of_articulation ;;
        *);;

// ---------------------			fup[v] = min (fup[v], fup[to]);			----------------------- END

// Находим tin_v
        -> ..step_check_point_of_articulation (*
        	<- searchElStr5;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _v;;
	        -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc_tin_v_2;;
	        -> rrel_3: rrel_assign: rrel_scp_var: rrel_link: rrel_const: _tin_v;;
	        -> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_tin_v_4;;
	        -> rrel_5: rrel_fixed: rrel_scp_const: rrel_node: rrel_const: tin_vertex;;

	        => nrel_then: ..step_check_point_of_articulation_2;;
	        => nrel_else: ..scp_operator_error_tin_v_print;;
        *);;  		

// На случай если что-то пошло не так
        -> ..scp_operator_error_tin_v_print (*
	        <- print;;
	        -> rrel_1: rrel_fixed: rrel_scp_const: [ERROR IN FIND tin_to, ..step_check_point_of_articulation !!!];;

	        => nrel_goto: ..end_dfs;;
        *);;

// fup[to] > tin[v]
        -> ..step_check_point_of_articulation_2 (*
	        <- ifGr;;
	        -> rrel_1: rrel_fixed : rrel_scp_var: _fup_to;;
	        -> rrel_2: rrel_fixed : rrel_scp_var: _tin_v;;

	        => nrel_then: ..step_check_point_of_articulation_4;; 
	        => nrel_else: ..step_check_point_of_articulation_3;;               
        *);;

// fup[to] = tin[v]
        -> ..step_check_point_of_articulation_3 (*
	        <- ifEq;;
	        -> rrel_1: rrel_fixed : rrel_scp_var: _fup_to;;
	        -> rrel_2: rrel_fixed : rrel_scp_var: _tin_v;;

	        => nrel_then: ..step_check_point_of_articulation_4;; 
	        => nrel_else: ..step1;;               
        *);;

// p != -1
        -> ..step_check_point_of_articulation_4 (*
            <- ifCoin;;
            -> rrel_1 : rrel_fixed : rrel_scp_var : _node;;
            -> rrel_2 : rrel_fixed : rrel_scp_var : _p;;

            => nrel_then: ..step1;; 
            => nrel_else: ..step_check_point_of_articulation_5_0;;              
        *);;

// Мы нашли разделяющию вершину
        -> ..step_check_point_of_articulation_5_0 (*
            <- searchElStr3;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _set_point_of_articulation;;
	        -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc_poa_2_t1;;
	        -> rrel_3: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _v;;

	        => nrel_then: ..step1;;                       
	        => nrel_else: ..step_check_point_of_articulation_5;;            
        *);;

        -> ..step_check_point_of_articulation_5 (*
            <- genElStr3;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _set_point_of_articulation;;
	        -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc_poa_2;;
	        -> rrel_3: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _v;;

	        => nrel_goto: ..step1;;             
        *);;

// Удаляем временное множество
        -> ..finish_dfs (*
            <- eraseEl;;
            -> rrel_1 : rrel_fixed : rrel_erase: rrel_scp_var : _temp_set;;

            => nrel_goto : ..end_root_is_poa;; 
        *);;

// p == -1
        -> ..end_root_is_poa (*
            <- ifCoin;;
            -> rrel_1 : rrel_fixed : rrel_scp_var : _node;;
            -> rrel_2 : rrel_fixed : rrel_scp_var : _p;;

            => nrel_then: ..end_root_is_poa_2;; 
            => nrel_else: ..end_dfs;;              
        *);;

// children > 1       
        -> ..end_root_is_poa_2 (*
	        <- ifGr;;
	        -> rrel_1: rrel_fixed : rrel_scp_var: _children;;
	        -> rrel_2: rrel_fixed : rrel_scp_const: [1];;

	        => nrel_then: ..end_root_is_poa_3;;                       
	        => nrel_else: ..end_dfs;;               
        *);;

// Мы нашли разделяющию вершину
        -> ..end_root_is_poa_3 (*
            <- searchElStr3;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _set_point_of_articulation;;
	        -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc_poa_2_tp;;
	        -> rrel_3: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _v;;

	        => nrel_then: ..end_dfs;;                       
	        => nrel_else: ..end_root_is_poa_4;;            
        *);;

        // Мы нашли разделяющию вершину
        -> ..end_root_is_poa_4 (*
            <- genElStr3;;
	        -> rrel_1: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _set_point_of_articulation;;
	        -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc_poa_2;;
	        -> rrel_3: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _v;;

	        => nrel_goto: ..end_dfs;;             
        *);;

// Завершаем поиск в глубину
        -> ..end_dfs (*
            <-return;; 
        *);;
    *);;
*);;
