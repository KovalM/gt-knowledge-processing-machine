proc_of_checking_if_connected_graph
=> nrel_main_idtf:
	[Программа проверки графа на слабую связность] (* <- lang_ru;; *);
		
=> nrel_initiation_condition_and_result: (..scp_proc_of_checking_if_connected_graph_initiation_condition
					  => ..scp_proc_of_checking_if_connected_graph_result);
					  
-> rrel_key_sc_element: 
concept_graph;
concept_connected_graph;
concept_disconnected_graph;

-> rrel_solver_key_sc_element:
concept_connected_graph;
concept_disconnected_graph;

<- rrel_key_sc_element:
	..scp_proc_of_checking_if_connected_graph_behavior
	(*
		<- sc_description_of_scp_program_behavior;;
		<= nrel_sc_text_translation:
		...
		(*
			-> rrel_example:
				[Эта программа проверяет исходный граф на слабую связность. В случае связного графа генерируется позитивная 				дуга принадлежности от абсолютного понятия "concept_connected_graph" к сущности "_graph", в ином случае 					- создаётся дуга принадлежности от абсолютного понятия "concept_disconnected_graph"];;
		*);;
	*);;


..scp_proc_of_checking_if_connected_graph_initiation_condition = [*
	concept_graph _-> _graph;;
*];;

..scp_proc_of_checking_if_connected_graph_result
	<- nrel_disjunction;
	-> ..scp_proc_of_checking_if_connected_graph_result_one;
	-> ..scp_proc_of_checking_if_connected_graph_result_two;;

..scp_proc_of_checking_if_connected_graph_result_one
= [*
	concept_connected_graph _-> _graph;;
*];;

..scp_proc_of_checking_if_connected_graph_result_two
= [*
	concept_disconnected_graph _-> _graph;;
*];;
